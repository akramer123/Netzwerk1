package transfer_protocol.src;

import ch.qos.logback.core.db.dialect.MsSQLDialect;

import java.io.*;
import java.net.*;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.stream.Stream;
import java.util.zip.CRC32;

public class FileSender {
    private static final int PORT = 90;
    private static final int BUFFER_LENGTH = 1024;
    private static final int TIMEOUT = 10000;
    private final String filename;
    private final String address;
    private final CRC32 crc = new CRC32();
    private final Transition[][] transition;
    private final FileInputStream fileInputStream;
  //  private final SocketFilter sendSocket = new SocketFilter();
  private final DatagramSocket sendSocket = new DatagramSocket();
    private byte[] fileData = new byte[1024];
    private State currentState;
    private int read;
    private int lastTransmittedBit;
    boolean streamClosed = false;
    boolean finishedSending = false;
    boolean receivedLastAck = false;boolean finWasSent = false;
    static boolean processFinished = false;
    private static int finBit;



    //  C:\\Users\\Kristina\\Desktop\\Studium\\Netzwerke\\Netzwerk1\\src\\transfer_protocol\\bild.png localhost
    public FileSender(String filename, String address) throws FileNotFoundException, SocketException {
        this.filename = filename;
        this.address = address;

        currentState = State.WAIT_FOR_START_CALL;
        transition = new Transition[State.values().length][Message.values().length];
        transition[State.WAIT_FOR_CALL_FROM_ABOVE_0.ordinal()][Message.GOT_CALL_FROM_ABOVE_0.ordinal()] = new SendNewPackage();
        transition[State.WAIT_FOR_CALL_FROM_ABOVE_1.ordinal()][Message.GOT_CALL_FROM_ABOVE_1.ordinal()] = new SendNewPackage();
        transition[State.WAIT_FOR_CALL_FROM_ABOVE_0.ordinal()][Message.LAST_PACKET_WAS_TRANSMITTED.ordinal()] = new SendFinPackage();
        transition[State.WAIT_FOR_CALL_FROM_ABOVE_1.ordinal()][Message.LAST_PACKET_WAS_TRANSMITTED.ordinal()] = new SendFinPackage();
        transition[State.WAIT_FOR_ACK_0.ordinal()][Message.TIMEOUT.ordinal()] = new ResendPackage();
        transition[State.WAIT_FOR_ACK_0.ordinal()][Message.RECEIVED_ACK_0.ordinal()] = new ReceiveAck0();
        transition[State.WAIT_FOR_ACK_0.ordinal()][Message.LAST_PACKET_WAS_TRANSMITTED.ordinal()] = new SendFinPackage();
        transition[State.WAIT_FOR_ACK_1.ordinal()][Message.TIMEOUT.ordinal()] = new ResendPackage();
        transition[State.WAIT_FOR_ACK_1.ordinal()][Message.RECEIVED_ACK_1.ordinal()] = new ReceiveAck1();
        transition[State.WAIT_FOR_ACK_1.ordinal()][Message.TIMEOUT.ordinal()] = new ResendPackage();
        transition[State.WAIT_FOR_ACK_1.ordinal()][Message.LAST_PACKET_WAS_TRANSMITTED.ordinal()] = new SendFinPackage();
        transition[State.WAIT_FOR_START_CALL.ordinal()][Message.GOT_START_CALL_FROM_ABOVE.ordinal()] = new SendNewPackage();
        transition[State.WAIT_FOR_ACK_START.ordinal()][Message.RECEIVED_ACK_START.ordinal()] = new ReceiveAck1();

        fileInputStream = new FileInputStream(filename);
    }

    public static void main(String[] args) throws IOException {
        FileSender fileSender = new FileSender(args[0], args[1]);
        fileSender.processMessage(Message.GOT_CALL_FROM_ABOVE_0);

        while (!processFinished) {
            if (fileSender.getCurrentState() == State.WAIT_FOR_CALL_FROM_ABOVE_0) {
                fileSender.processMessage(Message.GOT_CALL_FROM_ABOVE_0);
            } else if (fileSender.getCurrentState() == State.WAIT_FOR_CALL_FROM_ABOVE_1) {
                fileSender.processMessage(Message.GOT_CALL_FROM_ABOVE_1);
            } else if (fileSender.getCurrentState() == State.WAIT_FOR_ACK_0) {
                fileSender.waitForAck(0);
            } else if (fileSender.getCurrentState() == State.WAIT_FOR_ACK_1) {
                fileSender.waitForAck(1);
            } else if (fileSender.currentState == State.WAIT_FOR_ACK_FIN) {
                fileSender.waitForAck(finBit);
            } else if (fileSender.getCurrentState() == State.WAIT_FOR_START_CALL) {
                fileSender.processMessage(Message.GOT_START_CALL_FROM_ABOVE);
            } else if (fileSender.getCurrentState() == State.WAIT_FOR_ACK_START) {
                fileSender.waitForAck(1);
            }
        }
    }


    public void sendPacket(boolean packetIsNew, int alternatingBit) throws IOException {
        InetAddress IPAddress = InetAddress.getByName(address);

        if (finishedSending || currentState == State.WAIT_FOR_ACK_FIN) {
            generateFinPacket();
        } else if (packetIsNew) {
            crc.reset();
            if (currentState == State.WAIT_FOR_START_CALL) {
                generateStartPacket();
            } else {
                generateNewDataPacket();
            }


        }
        addHeaderToPacket((byte) alternatingBit);
        DatagramPacket datagramPacket = new DatagramPacket(fileData, BUFFER_LENGTH,IPAddress, PORT);

        if (!streamClosed) {
            sendSocket.send(datagramPacket);
            System.out.println("crc" + crc.getValue());
        }


        if (read < 1015 && currentState != State.WAIT_FOR_START_CALL && !finishedSending && packetIsNew) {
            finishedSending = true;
            lastTransmittedBit = alternatingBit;
        }
        if (currentState != State.WAIT_FOR_ACK_FIN && !finWasSent) {
            currentState = alternatingBit == 0 ? State.WAIT_FOR_ACK_0 : (alternatingBit == 1 ? State.WAIT_FOR_ACK_1 : State.WAIT_FOR_ACK_START);
        }
        if (finWasSent) {
            currentState = State.WAIT_FOR_ACK_FIN;
        }
    }

    private void generateFinPacket() {
        fileData = new byte[BUFFER_LENGTH];
        int bit = lastTransmittedBit == 0 ? 1 : 0;
        finWasSent = true;
        currentState = State.WAIT_FOR_ACK_FIN;
        crc.update(fileData, 0, 1015);
    }

    /**
     * put crc long in an byte array withlength 8 and send the checksum with data as the last 8 bytes (1016 - 1032) in the array file data
     **/
    private void addHeaderToPacket(byte alternatingBit) {
        fileData[1015] = alternatingBit;
        byte[] crcBytes = ByteBuffer.allocate(Long.SIZE / Byte.SIZE).putLong(crc.getValue()).array();
        Stream.iterate(0, i -> i + 1).limit(8).forEach(i -> fileData[1016 + i] = crcBytes[i]);
/*        for (int i = 1016; i < 1024; i++) {
            System.out.print(fileData[i]);
        }*/
        ;
    }

    private void generateNewDataPacket() {
        try {
            fileData = new byte[BUFFER_LENGTH];
            read = fileInputStream.read(fileData, 0, 1015);
            for (byte b : fileData) {
                System.out.print(b);

            }
            System.out.println();
        } catch (IOException ioException) {
            streamClosed = true;
        }
        crc.update(fileData, 0, 1015);
    }