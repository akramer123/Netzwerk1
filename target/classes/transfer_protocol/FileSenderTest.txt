package transfer_protocol.src;

import java.io.*;
import java.net.*;
import java.nio.ByteBuffer;
import java.util.stream.Stream;
import java.util.zip.CRC32;

public class FileSender {
    private static final int PORT = 90;
    private static final int BUFFER_LENGTH = 1024;
    private static final int TIMEOUT = 15000;
    private final String filename;
    private final String address;
    private final CRC32 crc = new CRC32();
    private final Transition[][] transition;
    private final FileInputStream fileInputStream;
   // private final DatagramSocket sendSocket = new DatagramSocket();
    private final SocketFilter sendSocket = new SocketFilter();
    private byte[] fileData = new byte[1024];
    private State currentState;
    private int read;
    private int lastTransmittedBit;
    boolean streamClosed = false;
    boolean finishedSending = false;
    boolean receivedLastAck = false;
    boolean finWasSent = false;
    static boolean processFinished = false;


   //  C:\\Users\\Kristina\\Desktop\\Studium\\Netzwerke\\Netzwerk1\\src\\transfer_protocol\\bild.png localhost
    public FileSender(String filename, String address) throws FileNotFoundException, SocketException {
        this.filename = filename;
        this.address = address;

        currentState = State.WAIT_FOR_START_CALL;
        transition = new Transition[State.values().length][Message.values().length];
        transition[State.WAIT_FOR_CALL_FROM_ABOVE_0.ordinal()][Message.GOT_CALL_FROM_ABOVE_0.ordinal()] = new SendNewPackage();
        transition[State.WAIT_FOR_CALL_FROM_ABOVE_1.ordinal()][Message.GOT_CALL_FROM_ABOVE_1.ordinal()] = new SendNewPackage();
        transition[State.WAIT_FOR_CALL_FROM_ABOVE_0.ordinal()][Message.LAST_PACKET_WAS_TRANSMITTED.ordinal()] = new SendFinPackage();
        transition[State.WAIT_FOR_CALL_FROM_ABOVE_1.ordinal()][Message.LAST_PACKET_WAS_TRANSMITTED.ordinal()] = new SendFinPackage();
        transition[State.WAIT_FOR_ACK_0.ordinal()][Message.TIMEOUT.ordinal()] = new ResendPackage();
        transition[State.WAIT_FOR_ACK_0.ordinal()][Message.RECEIVED_ACK_0.ordinal()] = new ReceiveAck0();
        transition[State.WAIT_FOR_ACK_0.ordinal()][Message.LAST_PACKET_WAS_TRANSMITTED.ordinal()] = new SendFinPackage();
        transition[State.WAIT_FOR_ACK_1.ordinal()][Message.TIMEOUT.ordinal()] = new ResendPackage();
        transition[State.WAIT_FOR_ACK_1.ordinal()][Message.RECEIVED_ACK_1.ordinal()] = new ReceiveAck1();
        transition[State.WAIT_FOR_ACK_1.ordinal()][Message.TIMEOUT.ordinal()] = new ResendPackage();
        transition[State.WAIT_FOR_ACK_1.ordinal()][Message.LAST_PACKET_WAS_TRANSMITTED.ordinal()] = new SendFinPackage();
        transition[State.WAIT_FOR_START_CALL.ordinal()][Message.GOT_START_CALL_FROM_ABOVE.ordinal()] = new SendNewPackage();
        transition[State.WAIT_FOR_ACK_START.ordinal()][Message.RECEIVED_ACK_START.ordinal()] = new ReceiveAck1();

        fileInputStream = new FileInputStream(filename);
    }